<?xml version="1.0"?>
<mavlink>
  <!-- XML file for prototyping definitions for standard.xml  -->
  <include>standard.xml</include>
  <version>0</version>
  <dialect>0</dialect>
  <enums>
    <enum name="WIFI_NETWORK_SECURITY">
      <description>WiFi wireless security protocols.</description>
      <entry value="0" name="WIFI_NETWORK_SECURITY_UNDEFINED">
        <description>Undefined or unknown security protocol.</description>
      </entry>
      <entry value="1" name="WIFI_NETWORK_SECURITY_OPEN">
        <description>Open network, no security.</description>
      </entry>
      <entry value="2" name="WIFI_NETWORK_SECURITY_WEP">
        <description>WEP.</description>
      </entry>
      <entry value="3" name="WIFI_NETWORK_SECURITY_WPA1">
        <description>WPA1.</description>
      </entry>
      <entry value="4" name="WIFI_NETWORK_SECURITY_WPA2">
        <description>WPA2.</description>
      </entry>
      <entry value="5" name="WIFI_NETWORK_SECURITY_WPA3">
        <description>WPA3.</description>
      </entry>
    </enum>
    <enum name="AIRSPEED_SENSOR_TYPE">
      <description>Types of airspeed sensor/data. May be be used in AIRSPEED message to estimate accuracy of indicated speed.</description>
      <entry value="0" name="AIRSPEED_SENSOR_TYPE_UNKNOWN">
        <description>Airspeed sensor type unknown/not supplied.</description>
      </entry>
      <entry value="1" name="AIRSPEED_SENSOR_TYPE_DIFFERENTIAL">
        <description>Differential airspeed sensor</description>
      </entry>
      <entry value="2" name="AIRSPEED_SENSOR_TYPE_MASS_FLOW">
        <description>Mass-flow airspeed sensor.</description>
      </entry>
      <entry value="3" name="AIRSPEED_SENSOR_TYPE_WINDVANE">
        <description>Windvane airspeed sensor.</description>
      </entry>
      <entry value="4" name="AIRSPEED_SENSOR_TYPE_SYNTHETIC">
        <description>Synthetic/calculated airspeed.</description>
      </entry>
    </enum>
    <!-- Transactions for parameter protocol -->
    <enum name="PARAM_TRANSACTION_TRANSPORT">
      <description>Possible transport layers to set and get parameters via mavlink during a parameter transaction.</description>
      <entry value="0" name="PARAM_TRANSACTION_TRANSPORT_PARAM">
        <description>Transaction over param transport.</description>
      </entry>
      <entry value="1" name="PARAM_TRANSACTION_TRANSPORT_PARAM_EXT">
        <description>Transaction over param_ext transport.</description>
      </entry>
    </enum>
    <enum name="PARAM_TRANSACTION_ACTION">
      <description>Possible parameter transaction actions.</description>
      <entry value="0" name="PARAM_TRANSACTION_ACTION_START">
        <description>Commit the current parameter transaction.</description>
      </entry>
      <entry value="1" name="PARAM_TRANSACTION_ACTION_COMMIT">
        <description>Commit the current parameter transaction.</description>
      </entry>
      <entry value="2" name="PARAM_TRANSACTION_ACTION_CANCEL">
        <description>Cancel the current parameter transaction.</description>
      </entry>
    </enum>
    <!-- The MAV_CMD enum entries describe either: -->
    <!--  * the data payload of mission items (as used in the MISSION_ITEM_INT message) -->
    <!--  * the data payload of mavlink commands (as used in the COMMAND_INT and COMMAND_LONG messages) -->
    <!-- ALL the entries in the MAV_CMD enum have a maximum of 7 parameters -->
    <enum name="MAV_CMD">
      <description>Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries</description>
      <entry value="900" name="MAV_CMD_PARAM_TRANSACTION" hasLocation="false" isDestination="false">
        <description>Request to start or end a parameter transaction. Multiple kinds of transport layers can be used to exchange parameters in the transaction (param, param_ext and mavftp). The command response can either be a success/failure or an in progress in case the receiving side takes some time to apply the parameters.</description>
        <param index="1" label="Action" enum="PARAM_TRANSACTION_ACTION">Action to be performed (start, commit, cancel, etc.)</param>
        <param index="2" label="Transport" enum="PARAM_TRANSACTION_TRANSPORT">Possible transport layers to set and get parameters via mavlink during a parameter transaction.</param>
        <param index="3" label="Transaction ID">Identifier for a specific transaction.</param>
      </entry>
      <entry value="5010" name="MAV_CMD_SET_FENCE_BREACH_ACTION" hasLocation="false" isDestination="false">
        <description>Sets the action on geofence breach.
          If sent using the command protocol this sets the system-default geofence action.
          As part of a mission protocol plan it sets the fence action for the next complete geofence definition *after* the command.
          Note: A fence action defined in a plan will override the default system setting (even if the system-default is `FENCE_ACTION_NONE`).
          Note: Every geofence in a plan can have its own action; if no fence action is defined for a particular fence the system-default will be used.
          Note: The flight stack should reject a plan or command that uses a geofence action that it does not support and send a STATUSTEXT with the reason.
        </description>
        <param index="1" label="Action" enum="FENCE_ACTION">Fence action on breach.</param>
      </entry>
    </enum>
    <enum name="ACTUATOR_CONFIGURATION">
      <description>Actuator configuration. Component information metadata can be used to know which outputs support which commands.</description>
      <entry value="0" name="ACTUATOR_CONFIGURATION_NONE">
        <description>Do nothing.</description>
      </entry>
      <entry value="1" name="ACTUATOR_CONFIGURATION_BEEP">
        <description>Command the actuator to beep now.</description>
      </entry>
      <entry value="2" name="ACTUATOR_CONFIGURATION_3D_MODE_ON">
        <description>Permanently set the actuator (ESC) to 3D mode (reversible thrust).</description>
      </entry>
      <entry value="3" name="ACTUATOR_CONFIGURATION_3D_MODE_OFF">
        <description>Permanently set the actuator (ESC) to non 3D mode (non-reversible thrust).</description>
      </entry>
      <entry value="4" name="ACTUATOR_CONFIGURATION_SPIN_DIRECTION1">
        <description>Permanently set the actuator (ESC) to spin direction 1 (which can be clockwise or counter-clockwise).</description>
      </entry>
      <entry value="5" name="ACTUATOR_CONFIGURATION_SPIN_DIRECTION2">
        <description>Permanently set the actuator (ESC) to spin direction 2 (opposite of direction 1).</description>
      </entry>
    </enum>
    <enum name="ACTUATOR_OUTPUT_FUNCTION">
      <description>Actuator output function. Values greater or equal to 1000 are autopilot-specific.</description>
      <entry value="0" name="ACTUATOR_OUTPUT_FUNCTION_NONE"><description>No function (disabled).</description></entry>
      <entry value="1" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR1"><description>Motor 1</description></entry>
      <entry value="2" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR2"><description>Motor 2</description></entry>
      <entry value="3" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR3"><description>Motor 3</description></entry>
      <entry value="4" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR4"><description>Motor 4</description></entry>
      <entry value="5" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR5"><description>Motor 5</description></entry>
      <entry value="6" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR6"><description>Motor 6</description></entry>
      <entry value="7" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR7"><description>Motor 7</description></entry>
      <entry value="8" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR8"><description>Motor 8</description></entry>
      <entry value="9" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR9"><description>Motor 9</description></entry>
      <entry value="10" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR10"><description>Motor 10</description></entry>
      <entry value="11" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR11"><description>Motor 11</description></entry>
      <entry value="12" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR12"><description>Motor 12</description></entry>
      <entry value="13" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR13"><description>Motor 13</description></entry>
      <entry value="14" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR14"><description>Motor 14</description></entry>
      <entry value="15" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR15"><description>Motor 15</description></entry>
      <entry value="16" name="ACTUATOR_OUTPUT_FUNCTION_MOTOR16"><description>Motor 16</description></entry>
      <entry value="33" name="ACTUATOR_OUTPUT_FUNCTION_SERVO1"><description>Servo 1</description></entry>
      <entry value="34" name="ACTUATOR_OUTPUT_FUNCTION_SERVO2"><description>Servo 2</description></entry>
      <entry value="35" name="ACTUATOR_OUTPUT_FUNCTION_SERVO3"><description>Servo 3</description></entry>
      <entry value="36" name="ACTUATOR_OUTPUT_FUNCTION_SERVO4"><description>Servo 4</description></entry>
      <entry value="37" name="ACTUATOR_OUTPUT_FUNCTION_SERVO5"><description>Servo 5</description></entry>
      <entry value="38" name="ACTUATOR_OUTPUT_FUNCTION_SERVO6"><description>Servo 6</description></entry>
      <entry value="39" name="ACTUATOR_OUTPUT_FUNCTION_SERVO7"><description>Servo 7</description></entry>
      <entry value="40" name="ACTUATOR_OUTPUT_FUNCTION_SERVO8"><description>Servo 8</description></entry>
      <entry value="41" name="ACTUATOR_OUTPUT_FUNCTION_SERVO9"><description>Servo 9</description></entry>
      <entry value="42" name="ACTUATOR_OUTPUT_FUNCTION_SERVO10"><description>Servo 10</description></entry>
      <entry value="43" name="ACTUATOR_OUTPUT_FUNCTION_SERVO11"><description>Servo 11</description></entry>
      <entry value="44" name="ACTUATOR_OUTPUT_FUNCTION_SERVO12"><description>Servo 12</description></entry>
      <entry value="45" name="ACTUATOR_OUTPUT_FUNCTION_SERVO13"><description>Servo 13</description></entry>
      <entry value="46" name="ACTUATOR_OUTPUT_FUNCTION_SERVO14"><description>Servo 14</description></entry>
      <entry value="47" name="ACTUATOR_OUTPUT_FUNCTION_SERVO15"><description>Servo 15</description></entry>
      <entry value="48" name="ACTUATOR_OUTPUT_FUNCTION_SERVO16"><description>Servo 16</description></entry>
    </enum>
    <enum name="MAV_CMD">
      <entry value="247" name="MAV_CMD_DO_UPGRADE" hasLocation="false" isDestination="false">
        <description>Request a target system to start an upgrade of one (or all) of its components.
          For example, the command might be sent to a companion computer to cause it to upgrade a connected flight controller.
          The system doing the upgrade will report progress using the normal command protocol sequence for a long running operation.
          Command protocol information: https://mavlink.io/en/services/command.html.</description>
        <param index="1" label="Component ID" enum="MAV_COMPONENT">Component id of the component to be upgraded. If set to 0, all components should be upgraded.</param>
        <param index="2" label="Reboot" minValue="0" maxValue="1" increment="1">0: Do not reboot component after the action is executed, 1: Reboot component after the action is executed.</param>
        <param index="3">Reserved</param>
        <param index="4">Reserved</param>
        <param index="5">Reserved</param>
        <param index="6">Reserved</param>
        <param index="7">WIP: upgrade progress report rate (can be used for more granular control).</param>
      </entry>
      <entry value="301" name="MAV_CMD_GROUP_START" hasLocation="false" isDestination="false">
        <description>Define start of a group of mission items. When control reaches this command a GROUP_START message is emitted.
          The end of a group is marked using MAV_CMD_GROUP_END with the same group id.
          Group ids are expected, but not required, to iterate sequentially.
          Groups can be nested.</description>
        <param index="1" label="Group ID" minValue="0" maxValue="16777216" increment="1">Mission-unique group id.
          Group id is limited because only 24 bit integer can be stored in 32 bit float.</param>
      </entry>
      <entry value="302" name="MAV_CMD_GROUP_END" hasLocation="false" isDestination="false">
        <description>Define end of a group of mission items. When control reaches this command a GROUP_END message is emitted.
          The start of the group is marked is marked using MAV_CMD_GROUP_START with the same group id.
          Group ids are expected, but not required, to iterate sequentially.
          Groups can be nested.</description>
        <param index="1" label="Group ID" minValue="0" maxValue="16777216" increment="1">Mission-unique group id.
          Group id is limited because only 24 bit integer can be stored in 32 bit float.</param>
      </entry>
      <entry value="310" name="MAV_CMD_ACTUATOR_TEST" hasLocation="false" isDestination="false">
        <description>Actuator testing command. This is similar to MAV_CMD_DO_MOTOR_TEST but operates on the level of output functions, i.e. it is possible to test Motor1 independent from which output it is configured on. Autopilots typically refuse this command while armed.</description>
        <param index="1" label="Value" minValue="-1" maxValue="1">Output value: 1 means maximum positive output, 0 to center servos or minimum motor thrust (expected to spin), -1 for maximum negative (if not supported by the motors, i.e. motor is not reversible, smaller than 0 maps to NaN). And NaN maps to disarmed (stop the motors).</param>
        <param index="2" label="Timeout" units="s" minValue="0" maxValue="3">Timeout after which the test command expires and the output is restored to the previous value. A timeout has to be set for safety reasons. A timeout of 0 means to restore the previous value immediately.</param>
        <param index="3">Reserved (set to 0)</param>
        <param index="4">Reserved (set to 0)</param>
        <param index="5" label="Output Function" enum="ACTUATOR_OUTPUT_FUNCTION">Actuator Output function</param>
        <param index="6">Reserved (set to 0)</param>
        <param index="7">Reserved (set to 0)</param>
      </entry>
      <entry value="311" name="MAV_CMD_CONFIGURE_ACTUATOR" hasLocation="false" isDestination="false">
        <description>Actuator configuration command.</description>
        <param index="1" label="Configuration" enum="ACTUATOR_CONFIGURATION">Actuator configuration action</param>
        <param index="2">Reserved (set to 0)</param>
        <param index="3">Reserved (set to 0)</param>
        <param index="4">Reserved (set to 0)</param>
        <param index="5" label="Output Function" enum="ACTUATOR_OUTPUT_FUNCTION">Actuator Output function</param>
        <param index="6">Reserved (set to 0)</param>
        <param index="7">Reserved (set to 0)</param>
      </entry>
    </enum>
  </enums>
  <messages>
    <!-- Transactions for parameter protocol -->
    <message id="19" name="PARAM_ACK_TRANSACTION">
      <description>Response from a PARAM_SET message when it is used in a transaction.</description>
      <field type="uint8_t" name="target_system">Id of system that sent PARAM_SET message.</field>
      <field type="uint8_t" name="target_component">Id of system that sent PARAM_SET message.</field>
      <field type="char[16]" name="param_id">Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
      <field type="float" name="param_value">Parameter value (new value if PARAM_ACCEPTED, current value otherwise)</field>
      <field type="uint8_t" name="param_type" enum="MAV_PARAM_TYPE">Parameter type.</field>
      <field type="uint8_t" name="param_result" enum="PARAM_ACK">Result code.</field>
    </message>
    <!-- mission protocol enhancements -->
    <message id="52" name="MISSION_CHANGED">
      <description>A broadcast message to notify any ground station or SDK if a mission, geofence or safe points have changed on the vehicle.</description>
      <field type="int16_t" name="start_index">Start index for partial mission change (-1 for all items).</field>
      <field type="int16_t" name="end_index">End index of a partial mission change. -1 is a synonym for the last mission item (i.e. selects all items from start_index). Ignore field if start_index=-1.</field>
      <field type="uint8_t" name="origin_sysid">System ID of the author of the new mission.</field>
      <field type="uint8_t" name="origin_compid" enum="MAV_COMPONENT">Compnent ID of the author of the new mission.</field>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="53" name="MISSION_CHECKSUM">
      <description>Checksum for the current mission, rally point or geofence plan, or for the "combined" plan (a GCS can use these checksums to determine if it has matching plans).
        This message must be broadcast with the appropriate checksum following any change to a mission, geofence or rally point definition
        (immediately after the MISSION_ACK that completes the upload sequence).
        It may also be requested using MAV_CMD_REQUEST_MESSAGE, where param 2 indicates the plan type for which the checksum is required.
        The checksum must be calculated on the autopilot, but may also be calculated by the GCS.
        The checksum uses the same CRC32 algorithm as MAVLink FTP (https://mavlink.io/en/services/ftp.html#crc32-implementation).
        The checksum for a mission, geofence or rally point definition is run over each item in the plan in seq order (excluding the home location if present in the plan), and covers the following fields (in order):
        frame, command, autocontinue, param1, param2, param3, param4, param5, param6, param7.
        The checksum for the whole plan (MAV_MISSION_TYPE_ALL) is calculated using the same approach, running over each sub-plan in the following order: mission, geofence then rally point.
      </description>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
      <field type="uint32_t" name="checksum">CRC32 checksum of current plan for specified type.</field>
    </message>
    <message id="295" name="AIRSPEED">
      <description>Airspeed information from a sensor.</description>
      <field type="uint8_t" name="id" instance="true">Sensor ID.</field>
      <field type="float" name="airspeed" units="m/s">Calibrated airspeed (CAS) if available, otherwise indicated airspeed (IAS).</field>
      <field type="int16_t" name="temperature" units="cdegC">Temperature. INT16_MAX for value unknown/not supplied.</field>
      <field type="float" name="press_diff" units="hPa">Differential pressure. NaN for value unknown/not supplied.</field>
      <field type="float" name="press_static" units="hPa">Static pressure. NaN for value unknown/not supplied.</field>
      <field type="float" name="error" units="m/s">Error/accuracy. NaN for value unknown/not supplied.</field>
      <field type="uint8_t" name="type" enum="AIRSPEED_SENSOR_TYPE">Airspeed sensor type. NaN for value unknown/not supplied. Used to estimate accuracy (i.e. as an alternative to using the error field).</field>
    </message>
    <message id="298" name="WIFI_NETWORK_INFO">
      <description>Detected WiFi network status information. This message is sent per each WiFi network detected in range with known SSID and general status parameters.</description>
      <field type="char[32]" name="ssid">Name of Wi-Fi network (SSID).</field>
      <field type="uint8_t" name="channel_id">WiFi network operating channel ID. Set to 0 if unknown or unidentified.</field>
      <field type="uint8_t" name="signal_quality" units="%">WiFi network signal quality.</field>
      <field type="uint16_t" name="data_rate" units="MiB/s">WiFi network data rate. Set to UINT16_MAX if data_rate information is not supplied.</field>
      <field type="uint8_t" name="security" enum="WIFI_NETWORK_SECURITY">WiFi network security type.</field>
    </message>
    <message id="414" name="GROUP_START">
      <description>Emitted during mission execution when control reaches MAV_CMD_GROUP_START.</description>
      <field type="uint32_t" name="group_id">Mission-unique group id (from MAV_CMD_GROUP_START).</field>
      <field type="uint32_t" name="mission_checksum">CRC32 checksum of current plan for MAV_MISSION_TYPE_ALL. As defined in MISSION_CHECKSUM message.</field>
      <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot).
        The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.</field>
    </message>
    <message id="415" name="GROUP_END">
      <description>Emitted during mission execution when control reaches MAV_CMD_GROUP_END.</description>
      <field type="uint32_t" name="group_id">Mission-unique group id (from MAV_CMD_GROUP_END).</field>
      <field type="uint32_t" name="mission_checksum">CRC32 checksum of current plan for MAV_MISSION_TYPE_ALL. As defined in MISSION_CHECKSUM message.</field>
      <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot).
        The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.</field>
    </message>
  </messages>
</mavlink>
